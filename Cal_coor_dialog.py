# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Calculadora_CoordenadasDialog
                                 A QGIS plugin
 convertidor de coordenadas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-03
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Fatima Matamoros
        email                : fatimamatamoros1315@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Cal_coor_dialog_base.ui'))


class Calculadora_CoordenadasDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Calculadora_CoordenadasDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.gradlatbox.valueChanged.connect(self.latgmstod)
        self.min_lat_box.valueChanged.connect(self.latgmstod)
        self.seg_lat_box.valueChanged.connect(self.latgmstod)
        self.latitud_box.currentTextChanged.connect(self.latgmstod)
        
        
        self.grad_lon_box.valueChanged.connect(self.longmstod)
        self.min_lon_box.valueChanged.connect(self.longmstod)
        self.seg_lon_box.valueChanged.connect(self.longmstod)
        self.longitud_box.currentTextChanged.connect(self.longmstod)
        
        self.latdecbox.editingFinished.connect(self.latdtogms)
        self.lon_dec_box.editingFinished.connect(self.londtogms)


    def latgmstod(self):
        iDeg = self.gradlatbox.value()
        iMin = self.min_lat_box.value()
        iSeg = self.seg_lat_box.value()
        
        latH = self.latitud_box.currentText()
        
        dDD = float(iDeg) + iMin/60.0 + iSeg/36000.0
        
        if latH == "S":
            dDD = dDD * -1
            

        self.latdecbox.setValue(dDD)
        
    def longmstod(self):
        iDeglon = self.grad_lon_box.value()
        iMinlon = self.min_lon_box.value()
        iSeglon = self.seg_lon_box.value()
        
        lonH = self.longitud_box.currentText()
        
        dDDlon = float(iDeglon) + iMinlon/60.0 + iSeglon/36000.0
        
        if lonH == "W":
            dDDlon = dDDlon * -1
            

        self.lon_dec_box.setValue(dDDlon)
        
        
    def latdtogms(self):
        lat = self.latdecbox.value()
        latHe = self.latitud_box.currentText()
        
        if lat >=0:
            latHe = "N"
        else:
            latHe = "S"
        
        lat_gr = int(abs(lat))
        self.gradlatbox.setValue(lat_gr)
        
        
        result_min = (abs(lat) - lat_gr) * 60
        result2 = int(result_min)
        if result2 < 0:
            result2 *= -1
        self.min_lat_box.setValue(result2)
        
        result7 = round((result_min - result2) * 60)
        if result7 < 0:
            result7 *= -1
        self.seg_lat_box.setValue(result7)
        
        

    def londtogms(self):
        lon = self.lon_dec_box.value()
        lonHe = self.longitud_box.currentText()
        
        if lat >=0:
            lonHe = "E"
        else:
            lonHe = "W"
        
        lon_gr = int(abs(lon))
        self.grad_lon_box.setValue(lon_gr)
        
        result_min_lon = (abs(lon) - lon_gr)* 60
        result3 = int(result_min_lon)
        self.min_lon_box.setValue(result3)
        if result3 < 0:
            result3 *= -1
        
        result8 = round((result_min_lon - result3) * 60)
        if result8 < 0:
            result8 *= -1
        self.seg_lon_box.setValue(result8)
 